// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

Module = MODULE ID LCURLY imports declarations RCURLY;

imports = imports import
		|
		;
import = IMPORT ID SEMICOLON;
		
declarations = declarations declaration
			|
			;
declaration = funcdecl
			| fielddecl
			| typedecl;
			
funcdecl = accessibility typename ID LPAREN paramlist RPAREN LCURLY statementlist RCURLY;
fielddecl = accessibility typename ID SEMICOLON;
typedecl = accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;

//---------
accessibility = PUBLIC
				| 
				;
//---------
typename = primitivetype
		| arraytype
		| ID;
primitivetype = VOID
				| BOOLEAN
				| INT;
arraytype = primitivetype LBRACKET RBRACKET
			| arraytype LBRACKET RBRACKET
			| ID LBRACKET RBRACKET; 

//--------
// 
paramlist = nonEmptyParList 
			| 
			;
nonEmptyParList = nonEmptyParList COMMA param
				| param;
param = typename ID;
//---------

statement = typename ID SEMICOLON
			| LCURLY statementlist RCURLY 
			| ifStatement
			| WHILE LPAREN expression RPAREN statement
			| BREAK SEMICOLON
			| returnStatement
			| expression SEMICOLON;
			
statementlist = statement statementlist
				| 
				;
ifStatement = IF LPAREN expression RPAREN statement 
			| IF LPAREN expression RPAREN statement ELSE statement; // Shift-reduce conflict
returnStatement = RETURN SEMICOLON
				| RETURN expression SEMICOLON;

expression = assignment
			| rhsExpression;
assignment = lhsExpression EQL expression;
lhsExpression = ID
				| arrayAccess;
arrayAccess = ID LBRACKET expression RBRACKET
			| arrayAccess LBRACKET expression RBRACKET;
rhsExpression = arithExpression optionalArith;
optionalArith = compOp arithExpression
				| 
				;
compOp = EQEQ | NEQ | LT | LEQ | GT | GEQ;
arithExpression = arithExpression addOp term
				| term;
addOp = PLUS | MINUS;
term = term mulOp factor
	| factor;
mulOp = TIMES | DIV | MOD;
factor = MINUS factor
		| primExpression;
primExpression = lhsExpression
				| ID LPAREN expressionList RPAREN 			// function call
				| LBRACKET nonEmptyExpressionList RBRACKET	// array Expression
				| STRING_LITERAL
				| INT_LITERAL
				| TRUE
				| FALSE
				| LPAREN expression RPAREN;					// parenthesised expression

expressionList = nonEmptyExpressionList
				|
				;
nonEmptyExpressionList = nonEmptyExpressionList COMMA expression
						| expression; 

				
/**/
