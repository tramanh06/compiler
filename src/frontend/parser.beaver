// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = ID LCURLY imports declarations RCURLY;

imports = import imports;
import = IMPORT ID SEMICOLON
		| 
		;
		
declarations = declaration declarations;
declaration = funcdecl
			| fielddecl
			| typedecl;
			
funcdecl = accessibility typename ID LPAREN paramlist RPAREN LCURLY statements RCURLY;
fielddecl = accessibility typename ID SEMICOLON;
typedecl = accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;

//---------
accessibility = PUBLIC
				| 
				;
//---------
typename = primitivetype
		| arraytype
		| ID;
primitivetype = VOID
				| BOOLEAN
				| INT;
arraytype = typename LBRACKET RBRACKET; 
// TODO: heed the hint to expand arraytype defn

//--------
// TODO: fix param with commas
paramlist = param paramsTail;
param = typename ID
		|
		;
paramsTail = COMMA param
			| 
			;

/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;